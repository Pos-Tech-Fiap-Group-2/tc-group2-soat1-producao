name: Java CI with Maven

on:
  push:
    branches: [ "feature/actions-ci", "features/actions-sonarcloud" ]
  pull_request:
    branches: [ "main" ]
env:
  aws-region: us-east-1

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Cache the Maven
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-ms
    - name: Build and Test Project
      run: mvn -B package --file pom.xml

  build:
    needs: [tests]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: build
      run: mvn -B package --file pom.xml -DskipTests
    - name: upload jar
      run: mkdir staging && cp target/*tc-challenge-group2-soat1-producao.jar staging
    - uses: actions/upload-artifact@v1
      with:
        name: Package
        path: staging

#  deploy:
#    needs: [build]
#    name: Deploy
#    runs-on: ubuntu-latest
#    steps:
#    - name: Checkout
#      uses: actions/checkout@v2

#    - name: Configure AWS credentials
#      uses: aws-actions/configure-aws-credentials@v1
#      with:
#        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
#        aws-region: ${{ env.aws-region }}

#    - name: Login to Amazon ECR
#      id: login-ecr
#      uses: aws-actions/amazon-ecr-login@v1

#    - name: Build, tag, and push image to Amazon ECR
#      id: build-image
#      env:
#        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#        ECR_REPOSITORY: tech-challenge-ecr
#        IMAGE_TAG: ${{ github.sha }}
#      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
#        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    # - name: Fill in the new image ID in the Amazon ECS task definition
    #   id: task-def
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: task-definition.json
    #     container-name: tech-challenge-api-producao
    #     image: ${{ steps.build-image.outputs.image }}

    # - name: Deploy Amazon ECS task definition
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.task-def.outputs.task-definition }}
    #     service: nginx-service
    #     cluster: aws-docker-sample
    #     wait-for-service-stability: true
  